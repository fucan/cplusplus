//string

namespace std {
	class string
	{
		size_t len;
		char* pbuf;
		
	public:
		explicit string(const char* str);	//
		string(const string&);
		~string();
		string& operator=(const string&);
		string& operator=(const char* s);
		const char& operator[](unsigned long index) const;
		char& operator[](unsigned long index);
		const char* c_str() const;
		unsigned long length() const;
		unsigned long size() const;
	};
	
	string::string(const char* str) :
		len(0),pbuf(0)
		{
			*this = str;
		}
	string::string(const string& s)
	{
		*this = s;
	}
	
	string::~string()
	{
		if(pbuf != 0) {
			delete[] pbuf;
			pbuf = 0;
		}
	}
	
	string& string::operator=(const string& s)
	{
		if (&s == this) {
			return *this;
		}
		this->~string();
		len = s.len;
		pbuf = strcpy(new char[len + 1],s.pbuf);
		return *this;
	}
	
	string& string::operator=(const char* s)
	{
		this->~string();
		len = strlen(s);
		pbuf = strcpy(new char[len + 1],s);
		return *this;
	}
	
	const char& string::operator[] (unsigned long index) const
	{
		return pbuf[index];
	}
	
	char& string::operator[] (unsigned long index)
	{
		return pbuf[index];
	}
	const char* string::c_str() const
	{
		return pbuf;
	}
	unsigned long string::length() const
	{
		return len;
	}
	unsigned long string::size() const
	{
		return len;
	}
	
	ofstream& operator<<(ofstream& o,const string& s)
	{
		return o << s.c_str();
	}
}